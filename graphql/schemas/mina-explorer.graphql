type TokenAccount {
  pk: String!
  token: String!
  balance_change: Int!
  symbol: String!
  increment_nonce: Boolean!
}

type TransactionZkapp {
  accounts_updated: [TokenAccount!]!
  actions: [String!]!
  events: [String!]!
}

type TokenHolderAccount {
  publicKey: String!
  balance: Int!
  nonce: Int!
}

type TokenHolder {
  token: String!
  symbol: String!
  account: TokenHolderAccount!
}

input TokenHoldersQueryInput {
  token: String
  holder: String
}

type Token {
  token: String!
  supply: Int!
  owner: String
  symbol: String
  num_holders: Int!
  total_num_txns: Int!
  total_num_tokens: Int!
  total_num_locked: Int!
}

input TokensQueryInput {
  token: String
  owner: String
  symbol: String
  supply: Int
}

enum TokensSortByInput {
  SUPPLY_ASC
  SUPPLY_DESC
}

type VerificationKey {
  hash: String
}

type ZkappAccount {
  zkappUri: String
  zkappVersion: Int
  verificationKey: VerificationKey
  appState: [String]
  actionState: [String]
}

type Account {
  publicKey: String
  username: String
  balance: Int
  nonce: Int
  delegate: String
  timeLocked: Boolean
  is_genesis_account: Boolean
  genesis_account: Int
  zkapp: ZkappAccount
  pk_epoch_num_blocks: Int
  pk_total_num_blocks: Int
  pk_epoch_num_snarks: Int
  pk_total_num_snarks: Int
  pk_epoch_num_user_commands: Int
  pk_total_num_user_commands: Int
  pk_epoch_num_internal_commands: Int
  pk_total_num_internal_commands: Int
}

input AccountQueryInput {
  publicKey: String
  username: String
  balance_lte: Int
  delegate: String
  zkapp: Boolean
  token: String
}

enum AccountSortByInput {
  BALANCE_DESC
  BALANCE_ASC
}

type BlockTransactionFeeTransfer {
  fee: String
  recipient: String
  type: String
}

type BlockTransaction {
  coinbase: String
  coinbaseReceiverAccount: BlockTransactionCoinbaseReceiverAccount
  feeTransfer: [BlockTransactionFeeTransfer]
  userCommands: [BlockTransactionUserCommand]
}

type BlockTransactionCoinbaseReceiverAccount {
  publicKey: String
}

type BlockTransactionUserCommand {
  amount: Float
  blockHeight: Int
  dateTime: DateTime
  failureReason: String
  fee: Float
  from: String
  hash: String
  kind: String
  memo: String
  nonce: Int
  to: String
}

input BlockTransactionUserCommandQueryInput {
  id_lte: String
  dateTime_ne: DateTime
  kind_in: [String]
  hash_exists: Boolean
  feeToken_nin: [Int]
  failureReason_nin: [String]
  kind_gte: String
  token_gt: Int
  id_in: [String]
  memo_nin: [String]
  to: String
  feeToken_ne: Int
  feeToken_gt: Int
  kind_gt: String
  OR: [BlockTransactionUserCommandQueryInput!]
  feeToken_lte: Int
  token_exists: Boolean
  receiver: BlockTransactionUserCommandReceiverQueryInput
  amount_lt: Float
  token_ne: Int
  failureReason: String
  kind_lt: String
  nonce: Int
  to_gte: String
  kind_ne: String
  failureReason_gt: String
  token_gte: Int
  to_lte: String
  feeToken_gte: Int
  dateTime: DateTime
  amount: Float
  hash_gt: String
  memo_lt: String
  token_lte: Int
  token: Int
  blockStateHash_gte: String
  amount_nin: [Float]
  failureReason_ne: String
  AND: [BlockTransactionUserCommandQueryInput!]
  blockStateHash_ne: String
  source: BlockTransactionUserCommandSourceQueryInput
  blockHeight_gte: Int
  blockStateHash_lte: String
  memo: String
  to_exists: Boolean
  from_ne: String
  dateTime_lt: DateTime
  fee_lte: Float
  from_in: [String]
  nonce_gte: Int
  feeToken_in: [Int]
  nonce_nin: [Int]
  amount_lte: Float
  fee_gt: Float
  id_ne: String
  from_gte: String
  hash_gte: String
  feePayer: BlockTransactionUserCommandFeePayerQueryInput
  nonce_lte: Int
  nonce_in: [Int]
  dateTime_exists: Boolean
  failureReason_lte: String
  memo_lte: String
  feePayer_exists: Boolean
  kind_nin: [String]
  token_lt: Int
  isDelegation: Boolean
  fee_lt: Float
  memo_gt: String
  fromAccount: BlockTransactionUserCommandFromAccountQueryInput
  from: String
  blockStateHash_lt: String
  amount_ne: Float
  blockStateHash_exists: Boolean
  kind: String
  feeToken_lt: Int
  dateTime_in: [DateTime]
  amount_in: [Float]
  dateTime_lte: DateTime
  nonce_exists: Boolean
  dateTime_gte: DateTime
  blockHeight_gt: Int
  fee_ne: Float
  fee_nin: [Float]
  from_lte: String
  feeToken_exists: Boolean
  kind_exists: Boolean
  dateTime_nin: [DateTime]
  nonce_lt: Int
  from_gt: String
  fee_gte: Float
  blockStateHash_gt: String
  memo_gte: String
  fee_in: [Float]
  nonce_ne: Int
  blockHeight_ne: Int
  dateTime_gt: DateTime
  blockHeight_in: [Int]
  blockHeight_nin: [Int]
  toAccount_exists: Boolean
  blockHeight: Int
  fee: Float
  blockStateHash_in: [String]
  fromAccount_exists: Boolean
  to_nin: [String]
  kind_lte: String
  failureReason_gte: String
  to_lt: String
  amount_gt: Float
  memo_exists: Boolean
  amount_gte: Float
  isDelegation_ne: Boolean
  blockStateHash_nin: [String]
  to_gt: String
  failureReason_exists: Boolean
  id_gt: String
  from_exists: Boolean
  fee_exists: Boolean
  token_in: [Int]
  receiver_exists: Boolean
  hash_ne: String
  failureReason_in: [String]
  hash_lte: String
  to_ne: String
  from_nin: [String]
  toAccount: BlockTransactionUserCommandToAccountQueryInput
  id: String
  nonce_gt: Int
  hash: String
  blockHeight_lte: Int
  blockHeight_exists: Boolean
  isDelegation_exists: Boolean
  id_nin: [String]
  feeToken: Int
  to_in: [String]
  memo_ne: String
  amount_exists: Boolean
  id_lt: String
  from_lt: String
  blockHeight_lt: Int
  memo_in: [String]
  token_nin: [Int]
  hash_nin: [String]
  source_exists: Boolean
  blockStateHash: String
  hash_lt: String
  id_gte: String
  id_exists: Boolean
  hash_in: [String]
  failureReason_lt: String
}

type DelegationTotal {
  totalStakePercentage: String
  countDelegates: Int
  totalDelegatedNanomina: Int
}

input BlockTransactionQueryInput {
  userCommands_exists: Boolean
  userCommands: [BlockTransactionUserCommandQueryInput]
  coinbase_gte: Long
  coinbaseReceiverAccount: BlockTransactionCoinbaseReceiverAccountQueryInput
  feeTransfer: [BlockTransactionFeeTransferQueryInput]
  coinbase_nin: [Long]
  coinbase_lt: Long
  feeTransfer_exists: Boolean
  userCommands_in: [BlockTransactionUserCommandQueryInput]
  feeTransfer_in: [BlockTransactionFeeTransferQueryInput]
  userCommands_nin: [BlockTransactionUserCommandQueryInput]
  AND: [BlockTransactionQueryInput!]
  coinbase_gt: Long
  coinbase_in: [Long]
  coinbase: Long
  coinbase_ne: Long
  coinbaseReceiverAccount_exists: Boolean
  coinbase_exists: Boolean
  coinbase_lte: Long
  feeTransfer_nin: [BlockTransactionFeeTransferQueryInput]
  OR: [BlockTransactionQueryInput!]
}

input BlockTransactionCoinbaseReceiverAccountQueryInput {
  publicKey_gt: String
  publicKey_gte: String
  publicKey_lte: String
  publicKey_exists: Boolean
  OR: [BlockTransactionCoinbaseReceiverAccountQueryInput!]
  publicKey_in: [String]
  publicKey_nin: [String]
  publicKey_ne: String
  publicKey: String
  publicKey_lt: String
  AND: [BlockTransactionCoinbaseReceiverAccountQueryInput!]
}

input BlockTransactionFeeTransferQueryInput {
  type_ne: String
  recipient: String
  recipient_nin: [String]
  recipient_gt: String
  type_lt: String
  fee_gt: Long
  fee_nin: [Long]
  fee_lte: Long
  type_gte: String
  recipient_gte: String
  fee_exists: Boolean
  OR: [BlockTransactionFeeTransferQueryInput!]
  type_gt: String
  fee_in: [Long]
  type: String
  fee_gte: Long
  type_in: [String]
  recipient_lt: String
  recipient_lte: String
  type_lte: String
  fee: Long
  recipient_in: [String]
  recipient_ne: String
  type_nin: [String]
  fee_lt: Long
  fee_ne: Long
  type_exists: Boolean
  recipient_exists: Boolean
  AND: [BlockTransactionFeeTransferQueryInput!]
}

type BlockWinnerAccount {
  publicKey: String
}

type TransactionReceiver {
  publicKey: String
}

type Stake {
  balance: Float
  username: String
  delegate: String
  delegationTotals: DelegationTotal
  balanceNanomina: Int
  epoch: Int
  ledgerHash: String
  nonce: Int
  pk: String
  public_key: String
  voting_for: String
  pk_epoch_num_blocks: Int
  epoch_num_blocks: Int
  epoch_num_accounts: Int
}

input StakesQueryInput {
  genesisStateHash: String
  stake_lte: String
  timing_exists: Boolean
  chainId_gte: String
  balance_ne: Float
  nonce: Int
  delegate_gte: String
  epoch_nin: [Int]
  public_key_gt: String
  ledgerHash_nin: [String]
  ledgerHash_lt: String
  chainId_in: [String]
  delegate_nin: [String]
  token_nin: [Int]
  token_lt: Int
  pk_gte: String
  balance_gt: Float
  ledgerHash_lte: String
  epoch_in: [Int]
  ledgerHash_gt: String
  delegate_gt: String
  pk_nin: [String]
  balance_lte: Float
  public_key_nin: [String]
  ledgerHash_ne: String
  voting_for: String
  nonce_in: [Int]
  permissions_exists: Boolean
  permissions: StakePermissionQueryInput
  chainId_nin: [String]
  token_gte: Int
  chainId_gt: String
  nonce_lt: Int
  pk_gt: String
  voting_for_lte: String
  receipt_chain_hash_in: [String]
  public_key_gte: String
  ledgerHash: String
  chainId_lte: String
  ledgerHash_in: [String]
  receipt_chain_hash_lt: String
  voting_for_gt: String
  balance_lt: Float
  token_ne: Int
  pk_in: [String]
  balance_exists: Boolean
  voting_for_gte: String  # Fixed typo from 'voting_for_g isoform'
  delegate: String
  OR: [StakesQueryInput!]
  balance_nin: [Float]
  epoch_ne: Int
  nonce_gte: Int
  AND: [StakesQueryInput!]
  voting_for_exists: Boolean
  public_key_exists: Boolean
  token_in: [Int]
  receipt_chain_hash_lte: String
  epoch_lte: Int
  balance_gte: Float
  voting_for_lt: String
  chainId: String
  delegate_ne: String
  public_key_in: [String]
  delegate_lte: String
  pk_lte: String
  receipt_chain_hash_ne: String
  voting_for_in: [String]
  public_key_lte: String
  receipt_chain_hash: String
  voting_for_ne: String
  token: Int
  public_key: String
  balance_in: [Float]
  public_key_lt: String
  chainId_exists: Boolean
  token_lte: Int
  delegate_exists: Boolean
  balance: Float
  receipt_chain_hash_gte: String
  epoch_exists: Boolean
  nonce_nin: [Int]
  chainId_ne: String
  epoch_gte: Int
  epoch_gt: Int
  voting_for_nin: [String]
  pk: String
  pk_ne: String
  nonce_exists: Boolean
  receipt_chain_hash_exists: Boolean
  token_exists: Boolean
  epoch: Int
  receipt_chain_hash_gt: String
  chainId_lt: String
  token_gt: Int
  nonce_gt: Int
  receipt_chain_hash_nin: [String]
  timing: StakeTimingQueryInput
  pk_lt: String
  public_key_ne: String
  nonce_ne: Int
  epoch_lt: Int
  nonce_lte: Int
  delegate_in: [String]
  ledgerHash_gte: String
  ledgerHash_exists: Boolean
  pk_exists: Boolean
  delegate_lt: String
}

type Snark {
  block: Block
  blockHeight: Int
  canonical: Boolean
  dateTime: DateTime
  fee: Float
  prover: String
}

input SnarkQueryInput {
  blockHeight_lt: Int
  fee_in: [Float]
  prover_gte: String
  fee_lt: Float
  dateTime_nin: [DateTime]
  prover_in: [String]
  prover_ne: String
  blockHeight_gt: Int
  prover: String
  block_exists: Boolean
  dateTime_lte: DateTime
  dateTime: DateTime
  fee_gt: Float
  dateTime_exists: Boolean
  workIds_exists: Boolean
  prover_lte: String
  dateTime_in: [DateTime]
  blockHeight_nin: [Int]
  fee_exists: Boolean
  canonical: Boolean
  canonical_ne: Boolean
  dateTime_gt: DateTime
  blockHeight_exists: Boolean
  block: BlockQueryInput
  blockHeight_ne: Int
  blockHeight_gte: Int
  workIds_in: [Int]
  fee: Float
  fee_gte: Float
  prover_nin: [String]
  AND: [SnarkQueryInput!]
  prover_exists: Boolean
  OR: [SnarkQueryInput!]
  dateTime_ne: DateTime
  workIds: [Int]
  dateTime_lt: DateTime
  blockHeight_in: [Int]
  fee_nin: [Float]
  workIds_nin: [Int]
  prover_lt: String
  prover_gt: String
  blockHeight_lte: Int
  fee_lte: Float
  dateTime_gte: DateTime
  fee_ne: Float
  blockHeight: Int
  canonical_exists: Boolean
}

type BlockSnarkJob {
  blockHeight: Int
  blockStateHash: String
  dateTime: DateTime
  fee: Int
  prover: String
}

scalar DateTime

type Query {
  accounts(
    limit: Int = 100
    query: AccountQueryInput
    sortBy: AccountSortByInput
  ): [Account]!
  blocks(
    limit: Int = 100
    sortBy: BlockSortByInput
    query: BlockQueryInput
  ): [Block]!
  feetransfers(
    query: FeetransferQueryInput
    limit: Int = 100
    sortBy: FeetransferSortByInput
  ): [Feetransfer]!
  snarks(
    query: SnarkQueryInput
    limit: Int = 100
    sortBy: SnarkSortByInput
  ): [Snark]!
  stakes(
    query: StakesQueryInput
    limit: Int = 100
    sortBy: StakesSortByInput
  ): [Stake]!
  transactions(
    query: TransactionQueryInput
    limit: Int = 100
    sortBy: TransactionSortByInput
  ): [Transaction]!
  tokens(
    query: TokensQueryInput
    limit: Int = 100
    sortBy: TokensSortByInput
  ): [Token]!
  tokenHolders(
    query: TokenHoldersQueryInput
    limit: Int = 100
  ): [TokenHolder]!
}

scalar Long

type BlockProtocolStateBlockchainState {
  snarkedLedgerHash: String
  stagedLedgerHash: String
}

type BlockProtocolStateConsensusState {
  epoch: Int
  slot: Int
  slotSinceGenesis: Int
  totalCurrency: Float
}

type Feetransfer {
  blockHeight: Int
  blockStateHash: Block
  canonical: Boolean
  dateTime: DateTime
  fee: Int
  recipient: String
  type: String
}

input FeetransferQueryInput {
  dateTime_nin: [DateTime]
  recipient: String
  blockStateHash: BlockQueryInput
  recipient_lt: String
  type_lte: String
  fee_gte: Int
  fee_nin: [Int]
  blockHeight_in: [Int]
  type: String
  dateTime_gte: DateTime
  type_in: [String]
  blockHeight_ne: Int
  dateTime: DateTime
  fee_ne: Int
  blockHeight_exists: Boolean
  OR: [FeetransferQueryInput!]
  type_gte: String
  canonical_exists: Boolean
  dateTime_lt: DateTime
  fee_exists: Boolean
  dateTime_gt: DateTime
  type_lt: String
  blockHeight_gte: Int
  recipient_lte: String
  blockHeight_nin: [Int]
  blockHeight_gt: Int
  blockHeight: Int
  blockHeight_lt: Int
  canonical: Boolean
  type_gt: String
  blockStateHash_exists: Boolean
  canonical_ne: Boolean
  fee_gt: Int
  recipient_gte: String
  AND: [FeetransferQueryInput!]
  fee_lt: Int
  type_exists: Boolean
  recipient_in: [String]
  recipient_exists: Boolean
  blockHeight_lte: Int
  dateTime_in: [DateTime]
  dateTime_exists: Boolean
  fee_lte: Int
  dateTime_lte: DateTime
  recipient_nin: [String]
  type_nin: [String]
  fee: Int
  fee_in: [Int]
  type_ne: String
  dateTime_ne: DateTime
  recipient_ne: String
  recipient_gt: String
}

type BlockProtocolState {
  blockchainState: BlockProtocolStateBlockchainState
  consensusState: BlockProtocolStateConsensusState
  previousStateHash: String
}

type Transaction {
  amount: Float
  block: Block
  blockHeight: Int
  canonical: Boolean
  dateTime: DateTime
  failureReason: String
  fee: Float
  from: String
  hash: String
  kind: String
  memo: String
  nonce: Int
  receiver: TransactionReceiver
  to: String
  zkapp: TransactionZkapp
}

input TransactionQueryInput {
  isApplied: Boolean
  fee_in: [Float]
  canonical_exists: Boolean
  memo_lt: String
  fromAccount: TransactionFromAccountQueryInput
  memo_gte: String
  fee_gt: Float
  toAccount_exists: Boolean
  kind_lte: String
  feeToken_in: [Int]
  token_lt: Int
  fee_exists: Boolean
  memo_gt: String
  token_nin: [Int]
  token_gte: Int
  canonical_ne: Boolean
  hash_gt: String
  receiver_exists: Boolean
  failureReason_exists: Boolean
  dateTime_exists: Boolean
  nonce_nin: [Int]
  feeToken_gte: Int
  id_in: [String]
  isDelegation_exists: Boolean
  feePayer: TransactionFeePayerQueryInput
  dateTime_ne: DateTime
  kind_gt: String
  amount_ne: Float
  to_gte: String
  feePayer_exists: Boolean
  kind_lt: String
  id_lt: String
  hash_ne: String
  to_nin: [String]
  dateTime_nin: [DateTime]
  blockHeight_exists: Boolean
  nonce_lte: Int
  feeToken_nin: [Int]
  id: String
  feeToken: Int
  toAccount: TransactionToAccountQueryInput
  blockHeight_lte: Int
  AND: [TransactionQueryInput!]
  amount: Float
  fee: Float
  feeToken_lt: Int
  nonce_gt: Int
  amount_gt: Float
  receiver: TransactionReceiverQueryInput
  hash_gte: String
  token_ne: Int
  to_exists: Boolean
  source: TransactionSourceQueryInput
  fee_lt: Float
  fee_gte: Float
  hash_lt: String
  amount_gte: Float
  hash_exists: Boolean
  from: String
  failureReason_ne: String
  id_gte: String
  kind_exists: Boolean
  blockHeight_gte: Int
  fee_ne: Float
  amount_lte: Float
  from_lte: String
  failureReason_lte: String
  memo_ne: String
  hash: String
  nonce_ne: Int
  failureReason_lt: String
  from_in: [String]
  blockHeight_nin: [Int]
  id_ne: String
  amount_nin: [Float]
  kind_gte: String
  from_gte: String
  from_nin: [String]
  isDelegation: Boolean
  nonce_lt: Int
  fromAccount_exists: Boolean
  to_gt: String
  token: String
  failureReason_in: [String]
  kind_ne: String
  token_exists: Boolean
  id_nin: [String]
  feeToken_ne: Int
  dateTime_gte: DateTime
  to_in: [String]
  block_exists: Boolean
  dateTime_lt: DateTime
  from_exists: Boolean
  kind_nin: [String]
  to_ne: String
  blockHeight: Int
  failureReason_gt: String
  id_gt: String
  dateTime_lte: DateTime
  blockHeight_ne: Int
  hash_nin: [String]
  to_lte: String
  nonce: Int
  memo_in: [String]
  feeToken_exists: Boolean
  feeToken_gt: Int
  memo: String
  from_gt: String
  failureReason_nin: [String]
  token_gt: Int
  fee_nin: [Float]
  kind_in: [String]
  canonical: Boolean
  fee_lte: Float
  OR: [TransactionQueryInput!]
  kind: String
  memo_exists: Boolean
  from_lt: String
  dateTime_in: [DateTime]
  source_exists: Boolean
  hash_lte: String
  id_lte: String
  hash_in: [String]
  blockHeight_gt: Int
  amount_lt: Float
  blockHeight_lt: Int
  amount_in: [Float]
  failureReason: String
  memo_nin: [String]
  nonce_exists: Boolean
  failureReason_gte: String
  feeToken_lte: Int
  token_lte: Int
  isDelegation_ne: Boolean
  dateTime: DateTime
  memo_lte: String
  block: BlockQueryInput
  dateTime_gt: DateTime
  from_ne: String
  nonce_in: [Int]
  id_exists: Boolean
  blockHeight_in: [Int]
  amount_exists: Boolean
  nonce_gte: Int
  token_in: [Int]
  to_lt: String
  to: String
  zkapp: Boolean
}

type BlockCreatorAccount {
  publicKey: String
}

input BlockQueryInput {
  creator_nin: [String]
  stateHash_lte: String
  canonical_ne: Boolean
  dateTime_lt: DateTime
  snarkJobs: [BlockSnarkJobQueryInput]
  creator_ne: String
  receivedTime: DateTime
  blockHeight_lte: Int
  stateHashField_gte: String
  receivedTime_in: [DateTime]
  blockHeight: Int
  stateHashField_exists: Boolean
  blockHeight_nin: [Int]
  creator_gt: String
  stateHash_gte: String
  stateHash_lt: String
  creator_gte: String
  protocolState: BlockProtocolStateQueryInput
  canonical_exists: Boolean
  dateTime_nin: [DateTime]
  creator_lte: String
  creatorAccount: BlockCreatorAccountQueryInput
  stateHashField_lt: String
  creator_in: [String]
  stateHash_ne: String
  receivedTime_ne: DateTime
  creator: String
  stateHashField_lte: String
  dateTime_lte: DateTime
  dateTime_exists: Boolean
  stateHashField_gt: String
  dateTime: DateTime
  dateTime_gt: DateTime
  winnerAccount_exists: Boolean
  receivedTime_gte: DateTime
  protocolState_exists: Boolean
  stateHash_exists: Boolean
  canonical: Boolean
  creator_exists: Boolean
  receivedTime_lte: DateTime
  blockHeight_exists: Boolean
  stateHashField_ne: String
  winnerAccount: BlockWinnerAccountQueryInput
  OR: [BlockQueryInput!]
  stateHashField: String
  receivedTime_lt: DateTime
  transactions: BlockTransactionQueryInput
  dateTime_gte: DateTime
  AND: [BlockQueryInput!]
  creatorAccount_exists: Boolean
  blockHeight_in: [Int]
  receivedTime_nin: [DateTime]
  snarkJobs_nin: [BlockSnarkJobQueryInput]
  dateTime_in: [DateTime]
  snarkJobs_in: [BlockSnarkJobQueryInput]
  blockHeight_lt: Int
  stateHashField_in: [String]
  blockHeight_ne: Int
  transactions_exists: Boolean
  creator_lt: String
  receivedTime_exists: Boolean
  blockHeight_gt: Int
  stateHash_nin: [String]
  stateHashField_nin: [String]
  dateTime_ne: DateTime
  stateHash_in: [String]
  stateHash: String
  blockHeight_gte: Int
  receivedTime_gt: DateTime
  snarkJobs_exists: Boolean
  stateHash_gt: String
}

input BlockCreatorAccountQueryInput {
  publicKey_exists: Boolean
  publicKey_ne: String
  publicKey_lte: String
  OR: [BlockCreatorAccountQueryInput!]
  publicKey_gte: String
  publicKey_lt: String
  publicKey_in: [String]
  AND: [BlockCreatorAccountQueryInput!]
  publicKey: String
  publicKey_nin: [String]
  publicKey_gt: String
}

input BlockSnarkJobQueryInput {
  prover: String
  workIds_in: [Int]
  fee_gt: Int
  blockStateHash_exists: Boolean
  prover_ne: String
  blockHeight: Int
  dateTime: DateTime
  AND: [BlockSnarkJobQueryInput!]
  blockHeight_lt: Int
  dateTime_lt: DateTime
  dateTime_ne: DateTime
  prover_lte: String
  dateTime_exists: Boolean
  fee: Int
  prover_exists: Boolean
  dateTime_lte: DateTime
  blockStateHash_lte: String
  dateTime_gte: DateTime
  dateTime_gt: DateTime
  fee_ne: Int
  fee_in: [Int]
  blockHeight_ne: Int
  prover_in: [String]
  fee_exists: Boolean
  workIds_exists: Boolean
  blockHeight_in: [Int]
  blockHeight_gte: Int
  prover_nin: [String]
  fee_nin: [Int]
  fee_lt: Int
  OR: [BlockSnarkJobQueryInput!]
  workIds: [Int]
  blockHeight_lte: Int
  blockStateHash_nin: [String]
  blockHeight_exists: Boolean
  blockStateHash_ne: String
  prover_lt: String
  dateTime_nin: [DateTime]
  blockStateHash_gt: String
  blockHeight_gt: Int
  blockStateHash_in: [String]
  prover_gt: String
  blockStateHash_gte: String
  blockStateHash_lt: String
  dateTime_in: [DateTime]
  fee_lte: Int
  prover_gte: String
  workIds_nin: [Int]
  blockStateHash: String
  fee_gte: Int
  blockHeight_nin: [Int]
}

input BlockProtocolStateQueryInput {
  previousStateHash_exists: Boolean
  blockchainState_exists: Boolean
  consensusState: BlockProtocolStateConsensusStateQueryInput
  previousStateHash_ne: String
  consensusState_exists: Boolean
  previousStateHash_nin: [String]
  previousStateHash_lt: String
  OR: [BlockProtocolStateQueryInput!]
  previousStateHash_lte: String
  blockchainState: BlockProtocolStateBlockchainStateQueryInput
  previousStateHash_gte: String
  previousStateHash_gt: String
  previousStateHash_in: [String]
  AND: [BlockProtocolStateQueryInput!]
  previousStateHash: String
}

input BlockProtocolStateBlockchainStateQueryInput {
  stagedLedgerHash: String
  snarkedLedgerHash_lt: String
  stagedLedgerHash_lt: String
  date_lte: Long
  snarkedLedgerHash_lte: String
  utcDate_exists: Boolean
  stagedLedgerHash_gt: String
  utcDate_lte: Long
  snarkedLedgerHash_gte: String
  snarkedLedgerHash_exists: Boolean
  utcDate_gte: Long
  date_ne: Long
  stagedLedgerHash_in: [String]
  AND: [BlockProtocolStateBlockchainStateQueryInput!]
  stagedLedgerHash_ne: String
  utcDate_ne: Long
  snarkedLedgerHash_in: [String]
  date_gte: Long
  snarkedLedgerHash: String
  stagedLedgerHash_gte: String
  utcDate: Long
  utcDate_nin: [Long]
  stagedLedgerHash_nin: [String]
  snarkedLedgerHash_ne: String
  stagedLedgerHash_exists: Boolean
  snarkedLedgerHash_nin: [String]
  date_gt: Long
  utcDate_gt: Long
  date_lt: Long
  stagedLedgerHash_lte: String
  OR: [BlockProtocolStateBlockchainStateQueryInput!]
  date: Long
  snarkedLedgerHash_gt: String
  date_nin: [Long]
  date_in: [Long]
  date_exists: Boolean
  utcDate_lt: Long
  utcDate_in: [Long]
}

input BlockProtocolStateConsensusStateQueryInput {
  slot_ne: Int
  blockHeight_nin: [Int]
  minWindowDensity_gt: Int
  blockHeight_in: [Int]
  slotSinceGenesis_gte: Int
  epochCount_ne: Int
  slot_lt: Int
  epoch_exists: Boolean
  OR: [BlockProtocolStateConsensusStateQueryInput!]
  blockchainLength_gt: Int
  minWindowDensity_ne: Int
  totalCurrency_ne: Float
  slotSinceGenesis_lte: Int
  slot_exists: Boolean
  nextEpochData: BlockProtocolStateConsensusStateNextEpochDatumQueryInput
  blockHeight: Int
  totalCurrency_gt: Float
  epoch_lt: Int
  epochCount_gt: Int
  epoch_ne: Int
  blockchainLength_lte: Int
  slot_lte: Int
  slot_nin: [Int]
  blockchainLength_nin: [Int]
  slot_in: [Int]
  minWindowDensity_gte: Int
  AND: [BlockProtocolStateConsensusStateQueryInput!]
  epoch_gt: Int
  slotSinceGenesis_nin: [Int]
  slotSinceGenesis_exists: Boolean
  hasAncestorInSameCheckpointWindow_exists: Boolean
  totalCurrency_lt: Float
  stakingEpochData: BlockProtocolStateConsensusStateStakingEpochDatumQueryInput
  slotSinceGenesis_ne: Int
  slot_gte: Int
  slot: Int
  nextEpochData_exists: Boolean
  minWindowDensity_lt: Int
  blockchainLength_exists: Boolean
  hasAncestorInSameCheckpointWindow: Boolean
  blockchainLength_gte: Int
  epoch: Int
  lastVrfOutput_lte: String
  minWindowDensity_exists: Boolean
  epochCount_nin: [Int]
  blockHeight_lte: Int
  totalCurrency_nin: [Float]
  blockHeight_exists: Boolean
  epochCount_gte: Int
  blockchainLength_ne: Int
  totalCurrency_lte: Float
  slotSinceGenesis_in: [Int]
  totalCurrency_gte: Float
  epoch_nin: [Int]
  minWindowDensity_lte: Int
  epochCount_lte: Int
  slot_gt: Int
  slotSinceGenesis_gt: Int
  hasAncestorInSameCheckpointWindow_ne: Boolean
  minWindowDensity_in: [Int]
  totalCurrency_in: [Float]
  totalCurrency_exists: Boolean
  minWindowDensity: Int
  minWindowDensity_nin: [Int]
  epoch_gte: Int
  lastVrfOutput_gt: String
  blockHeight_gte: Int
  blockchainLength_lt: Int
  blockHeight_gt: Int
  lastVrfOutput_nin: [String]
  epochCount: Int
  blockchainLength: Int
  lastVrfOutput_exists: Boolean
  epochCount_exists: Boolean
  lastVrfOutput_in: [String]
  epochCount_in: [Int]
  lastVrfOutput_ne: String
  blockHeight_lt: Int
  slotSinceGenesis_lt: Int
  epoch_in: [Int]
  blockHeight_ne: Int
  lastVrfOutput: String
  blockchainLength_in: [Int]
  lastVrfOutput_gte: String
  stakingEpochData_exists: Boolean
  epochCount_lt: Int
  slotSinceGenesis: Int
  epoch_lte: Int
  lastVrfOutput_lt: String
  totalCurrency: Float
}

enum BlockSortByInput {
  DATETIME_ASC
  RECEIVEDTIME_DESC
  STATEHASHFIELD_ASC
  STATEHASHFIELD_DESC
  CREATOR_ASC
  BLOCKHEIGHT_DESC
  CREATOR_DESC
  DATETIME_DESC
  RECEIVEDTIME_ASC
  STATEHASH_ASC
  STATEHASH_DESC
  BLOCKHEIGHT_ASC
}

enum SnarkSortByInput {
  PROVER_ASC
  BLOCKHEIGHT_ASC
  BLOCKSTATEHASH_DESC
  DATETIME_ASC
  DATETIME_DESC
  FEE_ASC
  FEE_DESC
  BLOCKHEIGHT_DESC
  BLOCKSTATEHASH_ASC
  PROVER_DESC
}

enum TransactionSortByInput {
  DATETIME_ASC
  FAILUREREASON_ASC
  FROM_DESC
  NONCE_DESC
  TO_ASC
  FAILUREREASON_DESC
  HASH_DESC
  KIND_ASC
  MEMO_DESC
  ID_DESC
  KIND_DESC
  MEMO_ASC
  TO_DESC
  BLOCKHEIGHT_ASC
  FROM_ASC
  HASH_ASC
  ID_ASC
  AMOUNT_ASC
  AMOUNT_DESC
  BLOCKSTATEHASH_ASC
  FEETOKEN_DESC
  TOKEN_DESC
  BLOCKSTATEHASH_DESC
  DATETIME_DESC
  FEETOKEN_ASC
  NONCE_ASC
  BLOCKHEIGHT_DESC
  FEE_ASC
  FEE_DESC
  TOKEN_ASC
}

enum FeetransferSortByInput {
  RECIPIENT_ASC
  RECIPIENT_DESC
  TYPE_ASC
  BLOCKHEIGHT_DESC
  BLOCKSTATEHASH_ASC
  DATETIME_DESC
  FEE_ASC
  FEE_DESC
  BLOCKHEIGHT_ASC
  BLOCKSTATEHASH_DESC
  DATETIME_ASC
  TYPE_DESC
}

enum StakesSortByInput {
  CHAINID_ASC
  PK_DESC
  PUBLIC_KEY_ASC
  BALANCE_DESC
  DELEGATE_ASC
  NONCE_DESC
  RECEIPT_CHAIN_HASH_ASC
  RECEIPT_CHAIN_HASH_DESC
  VOTING_FOR_DESC
  TOKEN_DESC
  VOTING_FOR_ASC
  CHAINID_DESC
  DELEGATE_DESC
  EPOCH_ASC
  PK_ASC
  LEDGERHASH_DESC
  TOKEN_ASC
  BALANCE_ASC
  EPOCH_DESC
  NONCE_ASC
  PUBLIC_KEY_DESC
  LEDGERHASH_ASC
  STAKE_DESC
  STAKE_ASC
}

type Block {
  blockHeight: Int
  canonical: Boolean
  creatorAccount: BlockCreatorAccount
  dateTime: DateTime
  protocolState: BlockProtocolState
  snarkFees: String
  snarkJobs: [BlockSnarkJob]
  stateHash: String
  transactions: BlockTransaction
  txFees: String
  winnerAccount: BlockWinnerAccount
}

input BlockTransactionUserCommandReceiverQueryInput {
  publicKey_lte: String
  OR: [BlockTransactionUserCommandReceiverQueryInput!]
  publicKey: String
  publicKey_lt: String
  publicKey_in: [String]
  AND: [BlockTransactionUserCommandReceiverQueryInput!]
  publicKey_nin: [String]
  publicKey_exists: Boolean
  publicKey_ne: String
  publicKey_gt: String
  publicKey_gte: String
}

input BlockTransactionUserCommandSourceQueryInput {
  publicKey_gte: String
  publicKey_exists: Boolean
  publicKey_lte: String
  AND: [BlockTransactionUserCommandSourceQueryInput!]
  publicKey: String
  publicKey_nin: [String]
  publicKey_lt: String
  publicKey_in: [String]
  OR: [BlockTransactionUserCommandSourceQueryInput!]
  publicKey_gt: String
  publicKey_ne: String
}

input BlockTransactionUserCommandFeePayerQueryInput {
  token_lt: Int
  token_lte: Int
  token_in: [Int]
  token_nin: [Int]
  token: Int
  token_ne: Int
  token_exists: Boolean
  token_gt: Int
  token_gte: Int
  AND: [BlockTransactionUserCommandFeePayerQueryInput!]
  OR: [BlockTransactionUserCommandFeePayerQueryInput!]
}

input BlockTransactionUserCommandFromAccountQueryInput {
  token_in: [Int]
  token_nin: [Int]
  token_lt: Int
  token_lte: Int
  token_gt: Int
  token: Int
  OR: [BlockTransactionUserCommandFromAccountQueryInput!]
  token_exists: Boolean
  token_ne: Int
  token_gte: Int
  AND: [BlockTransactionUserCommandFromAccountQueryInput!]
}

input BlockTransactionUserCommandToAccountQueryInput {
  token_in: [Int]
  token_lte: Int
  token_exists: Boolean
  AND: [BlockTransactionUserCommandToAccountQueryInput!]
  token_gt: Int
  token_ne: Int
  token_gte: Int
  token: Int
  token_lt: Int
  OR: [BlockTransactionUserCommandToAccountQueryInput!]
  token_nin: [Int]
}

input StakePermissionQueryInput {
  set_delegate_ne: String
  set_verification_key_gte: String
  send_gt: String
  send_exists: Boolean
  set_delegate_lte: String
  set_delegate_lt: String
  set_permissions_lte: String
  edit_state_nin: [String]
  send_nin: [String]
  edit_state_exists: Boolean
  edit_state_gt: String
  set_permissions_nin: [String]
  set_verification_key_gt: String
  OR: [StakePermissionQueryInput!]
  edit_state_lte: String
  set_permissions_lt: String
  set_verification_key_lt: String
  send: String
  set_permissions: String
  set_delegate: String
  set_delegate_exists: Boolean
  set_verification_key_nin: [String]
  set_delegate_gte: String
  edit_state: String
  edit_state_in: [String]
  stake_ne: Boolean
  stake_exists: Boolean
  set_delegate_in: [String]
  set_permissions_gte: String
  set_verification_key_lte: String
  edit_state_ne: String
  send_ne: String
  set_verification_key_ne: String
  send_lte: String
  set_delegate_gt: String
  send_in: [String]
  send_lt: String
  AND: [StakePermissionQueryInput!]
  set_permissions_exists: Boolean
  set_delegate_nin: [String]
  set_verification_key_in: [String]
  stake: Boolean
  set_permissions_in: [String]
  set_permissions_gt: String
  set_permissions_ne: String
  send_gte: String
  set_verification_key: String
  set_verification_key_exists: Boolean
  edit_state_gte: String
  edit_state_lt: String
}

input StakeTimingQueryInput {
  untimed_slot_ne: Int
  vesting_period_ne: Int
  timed_weighting_gt: Float
  vesting_increment_gt: Float
  initial_minimum_balance_nin: [Float]
  vesting_period_in: [Int]
  untimed_slot_gt: Int
  vesting_period_exists: Boolean
  untimed_slot_nin: [Int]
  vesting_period_gte: Int
  cliff_amount: Float
  cliff_amount_exists: Boolean
  initial_minimum_balance_gt: Float
  timed_in_epoch: Boolean
  timed_epoch_end_ne: Boolean
  untimed_slot_in: [Int]
  initial_minimum_balance_exists: Boolean
  cliff_amount_in: [Float]
  cliff_time_gt: Int
  untimed_slot: Int
  vesting_period_lte: Int
  initial_minimum_balance_in: [Float]
  initial_minimum_balance_ne: Float
  untimed_slot_exists: Boolean
  untimed_slot_gte: Int
  cliff_time_exists: Boolean
  vesting_period_nin: [Int]
  untimed_slot_lt: Int
  initial_minimum_balance_lte: Float
  timed_weighting: Float
  vesting_increment_exists: Boolean
  cliff_time_gte: Int
  vesting_increment: Float
  untimed_slot_lte: Int
  cliff_time_nin: [Int]
  timed_epoch_end_exists: Boolean
  cliff_amount_gte: Float
  cliff_time_in: [Int]
  vesting_period: Int
  vesting_increment_lt: Float
  vesting_increment_in: [Float]
  cliff_time_lte: Int
  vesting_increment_lte: Float
  AND: [StakeTimingQueryInput!]
  initial_minimum_balance_lt: Float
  cliff_time_lt: Int
  cliff_amount_lt: Float
  cliff_time_ne: Int
  cliff_amount_nin: [Float]
  vesting_increment_ne: Float
  cliff_amount_gt: Float
  vesting_increment_gte: Float
  timed_weighting_gte: Float
  timed_weighting_lt: Float
  cliff_amount_lte: Float
  timed_weighting_in: [Float]
  vesting_increment_nin: [Float]
  vesting_period_lt: Int
  OR: [StakeTimingQueryInput!]
  timed_in_epoch_exists: Boolean
  cliff_amount_ne: Float
  timed_weighting_ne: Float
  timed_in_epoch_ne: Boolean
  cliff_time: Int
  timed_weighting_exists: Boolean
  timed_epoch_end: Boolean
  timed_weighting_nin: [Float]
  vesting_period_gt: Int
  initial_minimum_balance: Float
  initial_minimum_balance_gte: Float
  timed_weighting_lte: Float
}

input TransactionFromAccountQueryInput {
  token_nin: [Int]
  token_in: [Int]
  OR: [TransactionFromAccountQueryInput!]
  token: Int
  token_gte: Int
  token_gt: Int
  token_lt: Int
  token_lte: Int
  token_ne: Int
  AND: [TransactionFromAccountQueryInput!]
  token_exists: Boolean
}

input TransactionFeePayerQueryInput {
  token_exists: Boolean
  token_lte: Int
  AND: [TransactionFeePayerQueryInput!]
  OR: [TransactionFeePayerQueryInput!]
  token_ne: Int
  token_lt: Int
  token_nin: [Int]
  token: Int
  token_gt: Int
  token_gte: Int
  token_in: [Int]
}

input TransactionReceiverQueryInput {
  publicKey_lte: String
  publicKey_gte: String
  publicKey_lt: String
  OR: [TransactionReceiverQueryInput!]
  publicKey_nin: [String]
  publicKey_exists: Boolean
  publicKey: String
  publicKey_gt: String
  publicKey_in: [String]
  publicKey_ne: String
  AND: [TransactionReceiverQueryInput!]
}

input TransactionSourceQueryInput {
  publicKey_nin: [String]
  OR: [TransactionSourceQueryInput!]
  publicKey_lte: String
  publicKey_exists: Boolean
  publicKey_ne: String
  AND: [TransactionSourceQueryInput!]
  publicKey_in: [String]
  publicKey: String
  publicKey_gt: String
  publicKey_gte: String
  publicKey_lt: String
}

input TransactionToAccountQueryInput {
  OR: [TransactionToAccountQueryInput!]
  token_nin: [Int]
  AND: [TransactionToAccountQueryInput!]
  token: Int
  token_gt: Int
  token_gte: Int
  token_lt: Int
  token_lte: Int
  token_in: [Int]
  token_exists: Boolean
  token_ne: Int
}

input BlockWinnerAccountQueryInput {
  balance: BlockWinnerAccountBalanceQueryInput
  publicKey_in: [String]
  publicKey_ne: String
  publicKey_gt: String
  AND: [BlockWinnerAccountQueryInput!]
  publicKey_lt: String
  publicKey_nin: [String]
  OR: [BlockWinnerAccountQueryInput!]
  publicKey_lte: String
  publicKey_exists: Boolean
  publicKey_gte: String
  publicKey: String
  balance_exists: Boolean
}

input BlockWinnerAccountBalanceQueryInput {
  blockHeight_in: [Int]
  stateHash_gte: String
  liquid_lt: Int
  total_gt: Long
  liquid_exists: Boolean
  unknown_in: [Long]
  liquid_in: [Int]
  total_gte: Long
  stateHash_gt: String
  stateHash_lt: String
  liquid_ne: Int
  locked_lte: Long
  unknown_gt: Long
  total_nin: [Long]
  locked_exists: Boolean
  total_lte: Long
  unknown_nin: [Long]
  total_lt: Long
  blockHeight_lte: Int
  stateHash_in: [String]
  stateHash: String
  blockHeight_exists: Boolean
  unknown_lt: Long
  liquid_gte: Int
  locked_ne: Long
  stateHash_lte: String
  unknown_lte: Long
  liquid_gt: Int
  blockHeight_lt: Int
  locked_in: [Long]
  locked_nin: [Long]
  blockHeight_gte: Int
  locked_lt: Long
  AND: [BlockWinnerAccountBalanceQueryInput!]
  unknown_ne: Long
  total_exists: Boolean
  liquid_lte: Int
  liquid: Int
  stateHash_nin: [String]
  blockHeight: Int
  locked_gt: Long
  OR: [BlockWinnerAccountBalanceQueryInput!]
  locked_gte: Long
  total_ne: Long
  stateHash_exists: Boolean
  blockHeight_gt: Int
  blockHeight_ne: Int
  stateHash_ne: String
  unknown: Long
  liquid_nin: [Int]
  locked: Long
  blockHeight_nin: [Int]
  total_in: [Long]
  unknown_gte: Long
  total: Long
  unknown_exists: Boolean
}

input BlockProtocolStateConsensusStateStakingEpochDatumQueryInput {
  startCheckpoint_gt: String
  epochLength_lte: Int
  lockCheckpoint_ne: String
  lockCheckpoint_gte: String
  seed: String
  startCheckpoint_ne: String
  epochLength_exists: Boolean
  lockCheckpoint_lt: String
  startCheckpoint_lt: String
  epochLength_gte: Int
  epochLength_lt: Int
  lockCheckpoint_gt: String
  seed_nin: [String]
  epochLength_ne: Int
  epochLength_gt: Int
  epochLength_in: [Int]
  startCheckpoint_gte: String
  OR: [BlockProtocolStateConsensusStateStakingEpochDatumQueryInput!]
  lockCheckpoint_in: [String]
  startCheckpoint_in: [String]
  ledger_exists: Boolean
  seed_in: [String]
  lockCheckpoint_exists: Boolean
  ledger: BlockProtocolStateConsensusStateStakingEpochDatumLedgerQueryInput
  lockCheckpoint_nin: [String]
  startCheckpoint_exists: Boolean
  seed_exists: Boolean
  lockCheckpoint_lte: String
  AND: [BlockProtocolStateConsensusStateStakingEpochDatumQueryInput!]
  startCheckpoint: String
  startCheckpoint_lte: String
  seed_lte: String
  seed_lt: String
  seed_gt: String
  epochLength: Int
  seed_gte: String
  epochLength_nin: [Int]
  lockCheckpoint: String
  seed_ne: String
}

input BlockProtocolStateConsensusStateStakingEpochDatumLedgerQueryInput {
  hash_in: [String]
  hash_exists: Boolean
  totalCurrency: Float
  hash_gte: String
  totalCurrency_lt: Float
  totalCurrency_nin: [Float]
  hash: String
  hash_lte: String
  totalCurrency_exists: Boolean
  totalCurrency_gt: Float
  OR: [BlockProtocolStateConsensusStateStakingEpochDatumLedgerQueryInput!]
  hash_gt: String
  AND: [BlockProtocolStateConsensusStateStakingEpochDatumLedgerQueryInput!]
  hash_ne: String
  hash_nin: [String]
  totalCurrency_gte: Float
  totalCurrency_in: [Float]
  totalCurrency_ne: Float
  hash_lt: String
  totalCurrency_lte: Float
}

input BlockProtocolStateConsensusStateNextEpochDatumQueryInput {
  lockCheckpoint: String
  seed_gte: String
  ledger: BlockProtocolStateConsensusStateNextEpochDatumLedgerQueryInput
  epochLength_ne: Int
  lockCheckpoint_nin: [String]
  seed_exists: Boolean
  lockCheckpoint_lt: String
  seed_nin: [String]
  lockCheckpoint_exists: Boolean
  seed: String
  lockCheckpoint_in: [String]
  startCheckpoint_nin: [String]
  lockCheckpoint_ne: String
  epochLength: Int
  startCheckpoint_lte: String
  AND: [BlockProtocolStateConsensusStateNextEpochDatumQueryInput!]
  seed_ne: String
  seed_lt: String
  lockCheckpoint_lte: String
  ledger_exists: Boolean
  startCheckpoint_exists: Boolean
  epochLength_exists: Boolean
  lockCheckpoint_gt: String
  epochLength_lte: Int
  seed_in: [String]
  lockCheckpoint_gte: String
  startCheckpoint_ne: String
  epochLength_gte: Int
  startCheckpoint_gte: String
  startCheckpoint_in: [String]
  seed_lte: String
  startCheckpoint: String
  startCheckpoint_lt: String
  epochLength_gt: Int
  startCheckpoint_gt: String
  epochLength_lt: Int
  seed_gt: String
  OR: [BlockProtocolStateConsensusStateNextEpochDatumQueryInput!]
  epochLength_nin: [Int]
  epochLength_in: [Int]
}

input BlockProtocolStateConsensusStateNextEpochDatumLedgerQueryInput {
  hash_gt: String
  totalCurrency_gt: Float
  hash: String
  totalCurrency_lt: Float
  totalCurrency_exists: Boolean
  hash_exists: Boolean
  hash_ne: String
  totalCurrency_in: [Float]
  totalCurrency_nin: [Float]
  totalCurrency_lte: Float
  totalCurrency_ne: Float
  hash_in: [String]
  AND: [BlockProtocolStateConsensusStateNextEpochDatumLedgerQueryInput!]
  totalCurrency_gte: Float
  hash_lt: String
  hash_gte: String
  hash_lte: String
  OR: [BlockProtocolStateConsensusStateNextEpochDatumLedgerQueryInput!]
  hash_nin: [String]
  totalCurrency: Float
}
